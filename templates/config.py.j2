import logging
try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict

dgl_mode = True

bind_nonsecure = True # Set to false to only use SSL
bind_address = "{{ inventory_hostname }}"
bind_port = {{ port }}

bind_pairs = (
    ("{{ inventory_hostname }}", {{ port }}),
)

logging_config = {
    "filename": "%%CHROOT_WEBDIR%%/run/webtiles.log",
    "level": logging.INFO,
    "format": "%(asctime)s %(levelname)s: %(message)s"
}

password_db = "%%CHROOT_LOGIN_DB%%"

static_path = "%%CHROOT_WEBDIR%%/static"
template_path = "%%CHROOT_WEBDIR%%/templates/"

# Path for server-side unix sockets (to be used to communicate with crawl)
server_socket_path = None # Uses global temp dir

# Server name, so far only used in the ttyrec metadata
server_id = "{{ server_name }}"

# Disable caching of game data files
game_data_no_cache = False

# Watch socket dirs for games not started by the server
watch_socket_dirs = True

# Game configs
# %n in paths is replaced by the current username
games = OrderedDict([
    ("dcss-git", dict(
        name = "DCSS trunk",
        crawl_binary = "/bin/crawl-git-launcher.sh",
        send_json_options = True,
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-git/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets")),
    ("spr-git", dict(
        name = "Sprint trunk",
        crawl_binary = "/bin/crawl-git-launcher.sh",
        send_json_options = True,
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-git-sprint/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets",
        options = ["-sprint"])),
    ("tut-git", dict(
        name = "Tutorial trunk",
        crawl_binary = "/bin/crawl-git-launcher.sh",
        send_json_options = True,
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-git/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-git-tut/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets",
        options = ["-tutorial"])),

{% for version in versions %}
    ("dcss-{{ version }}", dict(
        name = "DCSS {{ version }}",
        crawl_binary = "/bin/crawl-stable-launcher.sh",
        send_json_options = True,
        pre_options  = [ "{{ version }}" ],
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-{{ version[2:] }}/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets")),
    ("spr-{{ version }}", dict(
        name = "Sprint {{ version }}",
        crawl_binary = "/bin/crawl-stable-launcher.sh",
        send_json_options = True,
        pre_options  = [ "{{ version }}" ],
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-{{ version[2:] }}-sprint/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets",
        options = ["-sprint"])),
    ("tut-{{ version }}", dict(
        name = "Tutorial {{ version }}",
        crawl_binary = "/bin/crawl-stable-launcher.sh",
        send_json_options = True,
        pre_options  = [ "{{ version }}" ],
        rcfile_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        macro_path = "%%CHROOT_RCFILESDIR%%/crawl-{{ version }}/",
        morgue_path = "%%CHROOT_MORGUEDIR%%/%n/",
        morgue_url = "{{ protocol }}{{ domain }}/morgue/%n/",
        inprogress_path = "%%CHROOT_INPROGRESSDIR%%/crawl-{{ version[2:] }}-tut/",
        ttyrec_path = "%%CHROOT_TTYRECDIR%%/%n/",
        socket_path = "%%CHROOT_WEBDIR%%/sockets",
        options = ["-tutorial"])),

{% endfor %}
])

dgl_status_file = "%%CHROOT_WEBDIR%%/run/status"

# Set to None not to read milestones
milestone_file = [
{% for version in versions %}
    "%%CHROOT_CRAWL_BASEDIR%%/crawl-{{ version }}/saves/milestones",
    "%%CHROOT_CRAWL_BASEDIR%%/crawl-{{ version }}/saves/milestones-tutorial",
    "%%CHROOT_CRAWL_BASEDIR%%/crawl-{{ version }}/saves/milestones-sprint",
    "%%CHROOT_CRAWL_BASEDIR%%/crawl-{{ version }}/saves/milestones-zotdef",
{% endfor %}
    "%%CHROOT_CRAWL_GAMEDIR%%/saves/milestones",
    "%%CHROOT_CRAWL_GAMEDIR%%/saves/milestones-tutorial",
    "%%CHROOT_CRAWL_GAMEDIR%%/saves/milestones-sprint"
]

status_file_update_rate = 5

recording_term_size = (80, 24)

max_connections = 500

# Script to initialize a user, e.g. make sure the paths
# and the rc file exist. This is not done by the server
# at the moment.
init_player_program = "/bin/init-webtiles.sh"

{% if ssl %}
ssl_options = {
    "certfile": "{{ letsencrypt_defaults.webroot }}/??.pub",
    "keyfile": "{{ letsencrypt_defaults.webroot }}/??.key",
    "ca_certs": "{{ letsencrypt_defaults.webroot }}/??.pem"
}
{% else %}
ssl_options = None # No SSL
{% endif %}
ssl_address = "{{ inventory_hostname }}"
ssl_port = 443

ssl_bind_pairs = (
    ("{{ inventory_hostname }}", 443),
)

connection_timeout = 600
max_idle_time = 5 * 60 * 60

# Seconds until stale HTTP connections are closed
# This needs a patch currently not in mainline tornado.
http_connection_timeout = 600

kill_timeout = 10 # Seconds until crawl is killed after HUP is sent

nick_regex = r"^[a-zA-Z0-9]{3,20}$"
max_passwd_length = 20

# crypt() algorithm, e.g. "1" for MD5 or "6" for SHA-512; see crypt(3).
# If false, use traditional DES (but then only the first eight characters
# are significant).
crypt_algorithm = "6"
# If crypt_algorithm is true, the length of the salt string to use.  If
# crypt_algorithm is false, a two-character salt is used.
crypt_salt_length = 16

login_token_lifetime = 7 # Days

uid = {{ crawl_users[0].uid }}  # If this is not None, the server will setuid to that (numeric) id
gid = {{ crawl_users[0].uid }}  # after binding its sockets.

umask = None # e.g. 0077

chroot = "%%DGL_CHROOT%%"

pidfile = "%%CHROOT_WEBDIR%%/run/webtiles.pid"
daemon = True # If true, the server will detach from the session after startup

player_url = "{{ protocol }}{{ domain }}/scoring/players/%s.html"
